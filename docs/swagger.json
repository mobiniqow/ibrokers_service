{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/broker/api/v1/": {
            "get": {
                "description": "Get all brokers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "broker"
                ],
                "summary": "List of brokers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/broker.BrokerResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new broker with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "broker"
                ],
                "summary": "Create broker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Broker name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Broker age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Broker image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/broker.BrokerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/broker/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a broker by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "broker"
                ],
                "summary": "Get broker details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Broker ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/broker.BrokerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Broker not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update broker details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "broker"
                ],
                "summary": "Update broker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Broker ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Broker name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Broker age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Broker image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/broker.BrokerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Broker not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a broker by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "broker"
                ],
                "summary": "Delete broker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Broker ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Broker not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "broker"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Broker ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial Broker information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/broker.CreateBrokerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/broker.BrokerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "broker not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/buy_method/api/v1/": {
            "get": {
                "description": "Get all buymethods",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buymethod"
                ],
                "summary": "List of buymethods",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/buy_method.BuyMethodResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new buymethod with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buymethod"
                ],
                "summary": "Create buymethod",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BuyMethod name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "BuyMethod age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "BuyMethod image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/buy_method.BuyMethodResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/buy_method/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a buymethod by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buymethod"
                ],
                "summary": "Get buymethod details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BuyMethod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/buy_method.BuyMethodResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "BuyMethod not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update buymethod details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buymethod"
                ],
                "summary": "Update buymethod",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BuyMethod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "BuyMethod name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "BuyMethod age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "BuyMethod image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/buy_method.BuyMethodResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "BuyMethod not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a buymethod by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buymethod"
                ],
                "summary": "Delete buymethod",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BuyMethod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "BuyMethod not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buymethod"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BuyMethod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial BuyMethod information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/buy_method.CreateBuyMethodRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/buy_method.BuyMethodResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "buymethod not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/commodity/api/v1/": {
            "get": {
                "description": "Get all commoditys",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "commodity"
                ],
                "summary": "List of commoditys",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/commodity.CommodityResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new commodity with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "commodity"
                ],
                "summary": "Create commodity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Commodity name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Commodity age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Commodity image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/commodity.CommodityResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/commodity/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a commodity by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "commodity"
                ],
                "summary": "Get commodity details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Commodity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/commodity.CommodityResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Commodity not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update commodity details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "commodity"
                ],
                "summary": "Update commodity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Commodity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Commodity name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Commodity age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Commodity image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/commodity.CommodityResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Commodity not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a commodity by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "commodity"
                ],
                "summary": "Delete commodity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Commodity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Commodity not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "commodity"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Commodity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial Commodity information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commodity.CreateCommodityRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/commodity.CommodityResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "commodity not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/contract_type/api/v1/": {
            "get": {
                "description": "Get all contracttypes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contracttype"
                ],
                "summary": "List of contracttypes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/contract_type.ContractTypeResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new contracttype with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contracttype"
                ],
                "summary": "Create contracttype",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ContractType name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ContractType age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "ContractType image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/contract_type.ContractTypeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/contract_type/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a contracttype by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contracttype"
                ],
                "summary": "Get contracttype details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ContractType ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/contract_type.ContractTypeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "ContractType not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update contracttype details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contracttype"
                ],
                "summary": "Update contracttype",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ContractType ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ContractType name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "ContractType age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "ContractType image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/contract_type.ContractTypeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "ContractType not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a contracttype by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contracttype"
                ],
                "summary": "Delete contracttype",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ContractType ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "ContractType not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contracttype"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ContractType ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial ContractType information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contract_type.CreateContractTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/contract_type.ContractTypeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "contracttype not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/currency_unit/api/v1/": {
            "get": {
                "description": "Get all currencyunits",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "currencyunit"
                ],
                "summary": "List of currencyunits",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/currency_unit.CurrencyUnitResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new currencyunit with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "currencyunit"
                ],
                "summary": "Create currencyunit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CurrencyUnit name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "CurrencyUnit age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "CurrencyUnit image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/currency_unit.CurrencyUnitResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/currency_unit/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a currencyunit by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "currencyunit"
                ],
                "summary": "Get currencyunit details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CurrencyUnit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/currency_unit.CurrencyUnitResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "CurrencyUnit not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update currencyunit details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "currencyunit"
                ],
                "summary": "Update currencyunit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CurrencyUnit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "CurrencyUnit name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "CurrencyUnit age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "CurrencyUnit image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/currency_unit.CurrencyUnitResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "CurrencyUnit not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a currencyunit by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "currencyunit"
                ],
                "summary": "Delete currencyunit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CurrencyUnit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "CurrencyUnit not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "currencyunit"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CurrencyUnit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial CurrencyUnit information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/currency_unit.CreateCurrencyUnitRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/currency_unit.CurrencyUnitResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "currencyunit not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/delivery_place/api/v1/": {
            "get": {
                "description": "Get all deliveryplaces",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deliveryplace"
                ],
                "summary": "List of deliveryplaces",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/delivery_place.DeliveryPlaceResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new deliveryplace with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deliveryplace"
                ],
                "summary": "Create deliveryplace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeliveryPlace name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "DeliveryPlace age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "DeliveryPlace image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/delivery_place.DeliveryPlaceResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/delivery_place/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a deliveryplace by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deliveryplace"
                ],
                "summary": "Get deliveryplace details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeliveryPlace ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/delivery_place.DeliveryPlaceResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "DeliveryPlace not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update deliveryplace details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deliveryplace"
                ],
                "summary": "Update deliveryplace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeliveryPlace ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "DeliveryPlace name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "DeliveryPlace age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "DeliveryPlace image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/delivery_place.DeliveryPlaceResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "DeliveryPlace not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a deliveryplace by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deliveryplace"
                ],
                "summary": "Delete deliveryplace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeliveryPlace ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "DeliveryPlace not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deliveryplace"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeliveryPlace ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial DeliveryPlace information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/delivery_place.CreateDeliveryPlaceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/delivery_place.DeliveryPlaceResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "deliveryplace not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/group/api/v1/": {
            "get": {
                "description": "Get all groups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "List of groups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/group.GroupResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new group with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "Create group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Group age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Group image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/group.GroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/group/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a group by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "Get group details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/group.GroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update group details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "Update group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Group name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Group age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Group image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/group.GroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a group by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "Delete group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial Group information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.CreateGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/group.GroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "group not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/group_hall/api/v1/": {
            "get": {
                "description": "Get all grouphalls",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "grouphall"
                ],
                "summary": "List of grouphalls",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/group_hall.GroupHallResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new grouphall with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "grouphall"
                ],
                "summary": "Create grouphall",
                "parameters": [
                    {
                        "type": "string",
                        "description": "GroupHall name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "GroupHall age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "GroupHall image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/group_hall.GroupHallResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/group_hall/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a grouphall by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "grouphall"
                ],
                "summary": "Get grouphall details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "GroupHall ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/group_hall.GroupHallResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "GroupHall not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update grouphall details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "grouphall"
                ],
                "summary": "Update grouphall",
                "parameters": [
                    {
                        "type": "string",
                        "description": "GroupHall ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "GroupHall name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "GroupHall age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "GroupHall image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/group_hall.GroupHallResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "GroupHall not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a grouphall by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "grouphall"
                ],
                "summary": "Delete grouphall",
                "parameters": [
                    {
                        "type": "string",
                        "description": "GroupHall ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "GroupHall not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "grouphall"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "GroupHall ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial GroupHall information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group_hall.CreateGroupHallRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/group_hall.GroupHallResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "grouphall not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/hall_menu_group/api/v1/": {
            "get": {
                "description": "Get all hallmenugroups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hallmenugroup"
                ],
                "summary": "List of hallmenugroups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/hall_menu_group.HallMenuGroupResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new hallmenugroup with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hallmenugroup"
                ],
                "summary": "Create hallmenugroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HallMenuGroup name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "HallMenuGroup age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "HallMenuGroup image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/hall_menu_group.HallMenuGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/hall_menu_group/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a hallmenugroup by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hallmenugroup"
                ],
                "summary": "Get hallmenugroup details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HallMenuGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/hall_menu_group.HallMenuGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "HallMenuGroup not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update hallmenugroup details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hallmenugroup"
                ],
                "summary": "Update hallmenugroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HallMenuGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "HallMenuGroup name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "HallMenuGroup age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "HallMenuGroup image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/hall_menu_group.HallMenuGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "HallMenuGroup not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a hallmenugroup by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hallmenugroup"
                ],
                "summary": "Delete hallmenugroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HallMenuGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "HallMenuGroup not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hallmenugroup"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HallMenuGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial HallMenuGroup information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/hall_menu_group.CreateHallMenuGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/hall_menu_group.HallMenuGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "hallmenugroup not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/hall_menu_sub_group/api/v1/": {
            "get": {
                "description": "Get all hallmenusubgroups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hallmenusubgroup"
                ],
                "summary": "List of hallmenusubgroups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/hall_menu_sub_group.HallMenuSubGroupResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new hallmenusubgroup with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hallmenusubgroup"
                ],
                "summary": "Create hallmenusubgroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HallMenuSubGroup name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "HallMenuSubGroup age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "HallMenuSubGroup image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/hall_menu_sub_group.HallMenuSubGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/hall_menu_sub_group/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a hallmenusubgroup by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hallmenusubgroup"
                ],
                "summary": "Get hallmenusubgroup details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HallMenuSubGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/hall_menu_sub_group.HallMenuSubGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "HallMenuSubGroup not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update hallmenusubgroup details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hallmenusubgroup"
                ],
                "summary": "Update hallmenusubgroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HallMenuSubGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "HallMenuSubGroup name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "HallMenuSubGroup age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "HallMenuSubGroup image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/hall_menu_sub_group.HallMenuSubGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "HallMenuSubGroup not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a hallmenusubgroup by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hallmenusubgroup"
                ],
                "summary": "Delete hallmenusubgroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HallMenuSubGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "HallMenuSubGroup not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hallmenusubgroup"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HallMenuSubGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial HallMenuSubGroup information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/hall_menu_sub_group.CreateHallMenuSubGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/hall_menu_sub_group.HallMenuSubGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "hallmenusubgroup not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/main_group/api/v1/": {
            "get": {
                "description": "Get all maingroups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "maingroup"
                ],
                "summary": "List of maingroups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main_group.MainGroupResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new maingroup with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "maingroup"
                ],
                "summary": "Create maingroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MainGroup name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "MainGroup age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "MainGroup image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/main_group.MainGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/main_group/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a maingroup by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "maingroup"
                ],
                "summary": "Get maingroup details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MainGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main_group.MainGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "MainGroup not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update maingroup details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "maingroup"
                ],
                "summary": "Update maingroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MainGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "MainGroup name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "MainGroup age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "MainGroup image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main_group.MainGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "MainGroup not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a maingroup by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "maingroup"
                ],
                "summary": "Delete maingroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MainGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "MainGroup not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "maingroup"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MainGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial MainGroup information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main_group.CreateMainGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main_group.MainGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "maingroup not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/manufacturers/api/v1/": {
            "get": {
                "description": "Get all manufacturerss",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manufacturers"
                ],
                "summary": "List of manufacturerss",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/manufacturers.ManufacturersResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new manufacturers with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manufacturers"
                ],
                "summary": "Create manufacturers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Manufacturers name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Manufacturers age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Manufacturers image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/manufacturers.ManufacturersResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/manufacturers/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a manufacturers by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manufacturers"
                ],
                "summary": "Get manufacturers details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Manufacturers ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/manufacturers.ManufacturersResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Manufacturers not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update manufacturers details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manufacturers"
                ],
                "summary": "Update manufacturers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Manufacturers ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Manufacturers name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Manufacturers age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Manufacturers image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/manufacturers.ManufacturersResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Manufacturers not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a manufacturers by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manufacturers"
                ],
                "summary": "Delete manufacturers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Manufacturers ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Manufacturers not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manufacturers"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Manufacturers ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial Manufacturers information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/manufacturers.CreateManufacturersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/manufacturers.ManufacturersResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "manufacturers not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/measure_unit/api/v1/": {
            "get": {
                "description": "Get all measureunits",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "measureunit"
                ],
                "summary": "List of measureunits",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/measure_unit.MeasureUnitResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new measureunit with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "measureunit"
                ],
                "summary": "Create measureunit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MeasureUnit name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "MeasureUnit age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "MeasureUnit image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/measure_unit.MeasureUnitResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/measure_unit/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a measureunit by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "measureunit"
                ],
                "summary": "Get measureunit details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MeasureUnit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/measure_unit.MeasureUnitResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "MeasureUnit not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update measureunit details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "measureunit"
                ],
                "summary": "Update measureunit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MeasureUnit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "MeasureUnit name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "MeasureUnit age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "MeasureUnit image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/measure_unit.MeasureUnitResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "MeasureUnit not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a measureunit by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "measureunit"
                ],
                "summary": "Delete measureunit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MeasureUnit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "MeasureUnit not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "measureunit"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MeasureUnit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial MeasureUnit information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/measure_unit.CreateMeasureUnitRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/measure_unit.MeasureUnitResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "measureunit not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/offer/api/v1/": {
            "get": {
                "description": "Get all offers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offer"
                ],
                "summary": "List of offers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/offer.OfferResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new offer with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offer"
                ],
                "summary": "Create offer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Offer name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Offer age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Offer image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/offer.OfferResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/offer/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a offer by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offer"
                ],
                "summary": "Get offer details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Offer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/offer.OfferResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Offer not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update offer details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offer"
                ],
                "summary": "Update offer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Offer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Offer name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Offer age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Offer image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/offer.OfferResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Offer not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a offer by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offer"
                ],
                "summary": "Delete offer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Offer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Offer not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offer"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Offer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial Offer information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/offer.CreateOfferRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/offer.OfferResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "offer not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/offer_mod/api/v1/": {
            "get": {
                "description": "Get all offermods",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offermod"
                ],
                "summary": "List of offermods",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/offer_mod.OfferModResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new offermod with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offermod"
                ],
                "summary": "Create offermod",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OfferMod name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "OfferMod age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "OfferMod image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/offer_mod.OfferModResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/offer_mod/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a offermod by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offermod"
                ],
                "summary": "Get offermod details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OfferMod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/offer_mod.OfferModResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "OfferMod not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update offermod details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offermod"
                ],
                "summary": "Update offermod",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OfferMod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OfferMod name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "OfferMod age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "OfferMod image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/offer_mod.OfferModResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "OfferMod not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a offermod by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offermod"
                ],
                "summary": "Delete offermod",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OfferMod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "OfferMod not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offermod"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OfferMod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial OfferMod information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/offer_mod.CreateOfferModRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/offer_mod.OfferModResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "offermod not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/offer_type/api/v1/": {
            "get": {
                "description": "Get all offertypes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offertype"
                ],
                "summary": "List of offertypes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/offer_type.OfferTypeResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new offertype with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offertype"
                ],
                "summary": "Create offertype",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OfferType name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "OfferType age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "OfferType image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/offer_type.OfferTypeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/offer_type/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a offertype by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offertype"
                ],
                "summary": "Get offertype details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OfferType ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/offer_type.OfferTypeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "OfferType not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update offertype details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offertype"
                ],
                "summary": "Update offertype",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OfferType ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OfferType name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "OfferType age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "OfferType image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/offer_type.OfferTypeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "OfferType not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a offertype by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offertype"
                ],
                "summary": "Delete offertype",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OfferType ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "OfferType not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offertype"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OfferType ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial OfferType information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/offer_type.CreateOfferTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/offer_type.OfferTypeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "offertype not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/packaging_type/api/v1/": {
            "get": {
                "description": "Get all packagingtypes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "packagingtype"
                ],
                "summary": "List of packagingtypes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/packaging_type.PackagingTypeResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new packagingtype with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "packagingtype"
                ],
                "summary": "Create packagingtype",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PackagingType name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "PackagingType age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "PackagingType image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/packaging_type.PackagingTypeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/packaging_type/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a packagingtype by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "packagingtype"
                ],
                "summary": "Get packagingtype details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PackagingType ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/packaging_type.PackagingTypeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "PackagingType not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update packagingtype details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "packagingtype"
                ],
                "summary": "Update packagingtype",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PackagingType ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "PackagingType name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "PackagingType age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "PackagingType image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/packaging_type.PackagingTypeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "PackagingType not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a packagingtype by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "packagingtype"
                ],
                "summary": "Delete packagingtype",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PackagingType ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "PackagingType not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "packagingtype"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PackagingType ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial PackagingType information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/packaging_type.CreatePackagingTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/packaging_type.PackagingTypeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "packagingtype not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/report/api/v1/": {
            "get": {
                "description": "Get all reports",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report"
                ],
                "summary": "List of reports",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/report.ReportResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new report with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report"
                ],
                "summary": "Create report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Report age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Report image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/report.ReportResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/report/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a report by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report"
                ],
                "summary": "Get report details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/report.ReportResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Report not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update report details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report"
                ],
                "summary": "Update report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Report name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Report age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Report image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/report.ReportResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Report not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a report by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report"
                ],
                "summary": "Delete report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Report not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial Report information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/report.CreateReportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/report.ReportResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "report not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/settlement/api/v1/": {
            "get": {
                "description": "Get all settlements",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settlement"
                ],
                "summary": "List of settlements",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/settlement.SettlementResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new settlement with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settlement"
                ],
                "summary": "Create settlement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Settlement name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Settlement age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Settlement image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/settlement.SettlementResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/settlement/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a settlement by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settlement"
                ],
                "summary": "Get settlement details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Settlement ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/settlement.SettlementResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Settlement not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update settlement details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settlement"
                ],
                "summary": "Update settlement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Settlement ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Settlement name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Settlement age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Settlement image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/settlement.SettlementResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Settlement not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a settlement by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settlement"
                ],
                "summary": "Delete settlement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Settlement ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Settlement not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settlement"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Settlement ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial Settlement information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/settlement.CreateSettlementRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/settlement.SettlementResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "settlement not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/sub_group/api/v1/": {
            "get": {
                "description": "Get all subgroups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subgroup"
                ],
                "summary": "List of subgroups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/sub_group.SubGroupResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new subgroup with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subgroup"
                ],
                "summary": "Create subgroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SubGroup name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "SubGroup age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "SubGroup image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/sub_group.SubGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/sub_group/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a subgroup by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subgroup"
                ],
                "summary": "Get subgroup details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SubGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/sub_group.SubGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "SubGroup not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update subgroup details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subgroup"
                ],
                "summary": "Update subgroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SubGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "SubGroup name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "SubGroup age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "SubGroup image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/sub_group.SubGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "SubGroup not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a subgroup by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subgroup"
                ],
                "summary": "Delete subgroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SubGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "SubGroup not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subgroup"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SubGroup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial SubGroup information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sub_group.CreateSubGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/sub_group.SubGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "subgroup not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/supplier/api/v1/": {
            "get": {
                "description": "Get all suppliers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "supplier"
                ],
                "summary": "List of suppliers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/supplier.SupplierResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new supplier with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "supplier"
                ],
                "summary": "Create supplier",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Supplier name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Supplier age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Supplier image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/supplier.SupplierResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/supplier/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a supplier by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "supplier"
                ],
                "summary": "Get supplier details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Supplier ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/supplier.SupplierResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Supplier not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update supplier details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "supplier"
                ],
                "summary": "Update supplier",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Supplier ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Supplier name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Supplier age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Supplier image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/supplier.SupplierResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Supplier not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a supplier by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "supplier"
                ],
                "summary": "Delete supplier",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Supplier ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "Supplier not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "supplier"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Supplier ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial Supplier information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/supplier.CreateSupplierRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/supplier.SupplierResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "supplier not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/trading_hall/api/v1/": {
            "get": {
                "description": "Get all tradinghalls",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tradinghall"
                ],
                "summary": "List of tradinghalls",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/trading_hall.TradingHallResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new tradinghall with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tradinghall"
                ],
                "summary": "Create tradinghall",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TradingHall name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "TradingHall age",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "TradingHall image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/trading_hall.TradingHallResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        },
        "/trading_hall/api/v1/{id}": {
            "get": {
                "description": "Retrieve details of a tradinghall by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tradinghall"
                ],
                "summary": "Get tradinghall details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TradingHall ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/trading_hall.TradingHallResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "TradingHall not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update tradinghall details by ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tradinghall"
                ],
                "summary": "Update tradinghall",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TradingHall ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "TradingHall name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "TradingHall age",
                        "name": "age",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "TradingHall image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/trading_hall.TradingHallResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "TradingHall not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a tradinghall by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tradinghall"
                ],
                "summary": "Delete tradinghall",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TradingHall ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid UUID format",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "TradingHall not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update specific fields of a city by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tradinghall"
                ],
                "summary": "Update city partially",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TradingHall ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial TradingHall information",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/trading_hall.CreateTradingHallRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/trading_hall.TradingHallResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "404": {
                        "description": "tradinghall not found",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/basics.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "basics.APIError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "broker.BrokerResponse": {
            "type": "object",
            "properties": {
                "derivativesId": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "spotId": {
                    "type": "integer"
                }
            }
        },
        "broker.CreateBrokerRequest": {
            "type": "object",
            "properties": {
                "derivativesId": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "spotId": {
                    "type": "integer"
                }
            }
        },
        "buy_method.BuyMethodResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "buy_method.CreateBuyMethodRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "commodity.CommodityResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "parentId": {
                    "type": "integer"
                }
            }
        },
        "commodity.CreateCommodityRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "parentId": {
                    "type": "integer"
                }
            }
        },
        "contract_type.ContractTypeResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "contract_type.CreateContractTypeRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "currency_unit.CreateCurrencyUnitRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "currency_unit.CurrencyUnitResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "delivery_place.CreateDeliveryPlaceRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "delivery_place.DeliveryPlaceResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "group.CreateGroupRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "parentId": {
                    "type": "integer"
                }
            }
        },
        "group.GroupResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "parentId": {
                    "type": "integer"
                }
            }
        },
        "group_hall.CreateGroupHallRequest": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "integer"
                },
                "hall": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "group_hall.GroupHallResponse": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "integer"
                },
                "hall": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "hall_menu_group.CreateHallMenuGroupRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "hall_menu_group.HallMenuGroupResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "hall_menu_sub_group.CreateHallMenuSubGroupRequest": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "hall_menu_sub_group.HallMenuSubGroupResponse": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "main_group.CreateMainGroupRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "main_group.MainGroupResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "manufacturers.CreateManufacturersRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "manufacturers.ManufacturersResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "measure_unit.CreateMeasureUnitRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "measure_unit.MeasureUnitResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "offer.CreateOfferRequest": {
            "type": "object",
            "properties": {
                "brokerId": {
                    "type": "integer"
                },
                "buyMethodId": {
                    "type": "integer"
                },
                "commodityId": {
                    "type": "integer"
                },
                "contractTypeId": {
                    "type": "integer"
                },
                "currencyId": {
                    "type": "integer"
                },
                "deliveryPlaceId": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "initPrice": {
                    "type": "integer"
                },
                "lotSize": {
                    "type": "integer"
                },
                "manufacturerId": {
                    "type": "integer"
                },
                "maxIncOfferVol": {
                    "type": "integer"
                },
                "maxInitPrice": {
                    "type": "integer"
                },
                "maxOfferPrice": {
                    "type": "integer"
                },
                "maxOrderVol": {
                    "type": "integer"
                },
                "measureUnitId": {
                    "type": "integer"
                },
                "minAllocationVol": {
                    "type": "integer"
                },
                "minInitPrice": {
                    "type": "integer"
                },
                "minOfferPrice": {
                    "type": "integer"
                },
                "minOfferVol": {
                    "type": "integer"
                },
                "minOrderVol": {
                    "type": "integer"
                },
                "offerModeId": {
                    "type": "integer"
                },
                "offerTypeId": {
                    "type": "integer"
                },
                "offerVol": {
                    "type": "integer"
                },
                "packagingTypeId": {
                    "type": "integer"
                },
                "permissibleError": {
                    "type": "integer"
                },
                "prepaymentPercent": {
                    "type": "integer"
                },
                "priceDiscoveryMinOrderVol": {
                    "type": "integer"
                },
                "securityTypeId": {
                    "type": "integer"
                },
                "settlementTypeId": {
                    "type": "integer"
                },
                "supplierId": {
                    "type": "integer"
                },
                "tickSize": {
                    "type": "integer"
                },
                "tradingHallId": {
                    "type": "integer"
                },
                "weightFactor": {
                    "type": "integer"
                }
            }
        },
        "offer.OfferResponse": {
            "type": "object",
            "properties": {
                "brokerId": {
                    "type": "integer"
                },
                "buyMethodId": {
                    "type": "integer"
                },
                "commodityId": {
                    "type": "integer"
                },
                "contractTypeId": {
                    "type": "integer"
                },
                "currencyId": {
                    "type": "integer"
                },
                "deliveryPlaceId": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "initPrice": {
                    "type": "integer"
                },
                "lotSize": {
                    "type": "integer"
                },
                "manufacturerId": {
                    "type": "integer"
                },
                "maxIncOfferVol": {
                    "type": "integer"
                },
                "maxInitPrice": {
                    "type": "integer"
                },
                "maxOfferPrice": {
                    "type": "integer"
                },
                "maxOrderVol": {
                    "type": "integer"
                },
                "measureUnitId": {
                    "type": "integer"
                },
                "minAllocationVol": {
                    "type": "integer"
                },
                "minInitPrice": {
                    "type": "integer"
                },
                "minOfferPrice": {
                    "type": "integer"
                },
                "minOfferVol": {
                    "type": "integer"
                },
                "minOrderVol": {
                    "type": "integer"
                },
                "offerModeId": {
                    "type": "integer"
                },
                "offerTypeId": {
                    "type": "integer"
                },
                "offerVol": {
                    "type": "integer"
                },
                "packagingTypeId": {
                    "type": "integer"
                },
                "permissibleError": {
                    "type": "integer"
                },
                "prepaymentPercent": {
                    "type": "integer"
                },
                "priceDiscoveryMinOrderVol": {
                    "type": "integer"
                },
                "securityTypeId": {
                    "type": "integer"
                },
                "settlementTypeId": {
                    "type": "integer"
                },
                "supplierId": {
                    "type": "integer"
                },
                "tickSize": {
                    "type": "integer"
                },
                "tradingHallId": {
                    "type": "integer"
                },
                "weightFactor": {
                    "type": "integer"
                }
            }
        },
        "offer_mod.CreateOfferModRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "offer_mod.OfferModResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "offer_type.CreateOfferTypeRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "offer_type.OfferTypeResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "packaging_type.CreatePackagingTypeRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "packaging_type.PackagingTypeResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "report.CreateReportRequest": {
            "type": "object",
            "properties": {
                "commodityId": {
                    "type": "integer"
                },
                "contractTypeId": {
                    "type": "integer"
                },
                "currencyId": {
                    "type": "integer"
                },
                "finalWeightedAveragePrice": {
                    "type": "integer"
                },
                "manufacturerId": {
                    "type": "integer"
                },
                "maximumPrice": {
                    "type": "integer"
                },
                "measurementUnitId": {
                    "type": "integer"
                },
                "minimumPrice": {
                    "type": "integer"
                },
                "offerBasePrice": {
                    "type": "integer"
                },
                "offerId": {
                    "type": "integer"
                },
                "sellerBrokerId": {
                    "type": "integer"
                },
                "supplierId": {
                    "type": "integer"
                }
            }
        },
        "report.ReportResponse": {
            "type": "object",
            "properties": {
                "commodityId": {
                    "type": "integer"
                },
                "contractTypeId": {
                    "type": "integer"
                },
                "currencyId": {
                    "type": "integer"
                },
                "finalWeightedAveragePrice": {
                    "type": "integer"
                },
                "manufacturerId": {
                    "type": "integer"
                },
                "maximumPrice": {
                    "type": "integer"
                },
                "measurementUnitId": {
                    "type": "integer"
                },
                "minimumPrice": {
                    "type": "integer"
                },
                "offerBasePrice": {
                    "type": "integer"
                },
                "offerId": {
                    "type": "integer"
                },
                "sellerBrokerId": {
                    "type": "integer"
                },
                "supplierId": {
                    "type": "integer"
                }
            }
        },
        "settlement.CreateSettlementRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "settlement.SettlementResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "sub_group.CreateSubGroupRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "parentId": {
                    "type": "integer"
                }
            }
        },
        "sub_group.SubGroupResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "parentId": {
                    "type": "integer"
                }
            }
        },
        "supplier.CreateSupplierRequest": {
            "type": "object",
            "properties": {
                "customerId": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "supplier.SupplierResponse": {
            "type": "object",
            "properties": {
                "customerId": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "trading_hall.CreateTradingHallRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "trading_hall.TradingHallResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        }
    }
}